#!/bin/sh
ETCD_HOST=172.17.42.1
ETCD_PORT=4001
ETCD=${ETCD_HOST}:${ETCD_PORT}
CHILD_PIDS=
. /bin/etcdctl.sh

block() {
    # Wait for termination signal.
    mkfifo pipe && cat pipe
}

client() {
    # Read the container's ambassador server's public endpoints.
    for PORT_DIR in $(etcdctl_ls vapr/ambassador/"${CONTAINER}"/bindings); do
        EXPOSED_PORT=$(basename "${PORT_DIR}")
        BINDING=$(etcdctl_get vapr/ambassador/"${CONTAINER}"/bindings/"${EXPOSED_PORT}"/bind)

        # Begin forwarding the ports.
        socat TCP-LISTEN:"${EXPOSED_PORT}",reuseaddr,fork openssl-connect:"${BINDING}",cert=/tmp/cert-key.pem,cafile=/vapr/certstore/ca.crt &
        CHILD_PIDS="${CHILD_PIDS} $!"
        echo Forwarding connections to "${CONTAINER}:${EXPOSED_PORT}".
    done
}

server() {
    [[ "${EXTERNAL_IP}" == "" ]] && usage && exit 1
    
    # Unregister existing ambassadors.
    etcdctl_rm vapr/ambassador/"${CONTAINER}" recursive
    
    socat TCP-LISTEN:1,reuseaddr UNIX-CLIENT:/var/run/docker.sock &
    socat TCP-LISTEN:2,reuseaddr UNIX-CLIENT:/var/run/docker.sock &
    sleep 1 # Wait for sockets to be set up.
    wget -q -O- http://localhost:1/containers/"${CONTAINER}"/json > /tmp/target_container_info
    wget -q -O- http://localhost:2/containers/"${HOSTNAME}"/json > /tmp/ambassador_container_info
    
    HOST_PORTS=$(echo /tmp/ambassador_container_info | JSON.awk | awk '{ if ($1 ~ /\["NetworkSettings","Ports",.*"HostPort"]/) { print $1 " " $2; } }' | sed 's/.*"Ports","\([0-9]\+\).*"\([0-9]\+\)"/\1,\2/')
    TARGET_IP=$(echo /tmp/target_container_info | JSON.awk | awk '{ if ($1 ~ /\["NetworkSettings","IPAddress"]/) { print $2; } }' | sed 's/"\(.*\)"/\1/')

    IDX=0
    
    while read TARGET_PORT; do
        IFS="," read INTERNAL_PORT EXTERNAL_PORT << EOF
$(echo "${HOST_PORTS}" | cut -d " " -f $((${IDX} + 1)) | sed 's|/tcp||')
EOF

        if [[ "$INTERNAL_PORT" == "" ]]; then
            echo "Insufficient ports allocated to ambassador; use the -p argument to docker to allocate more ports."
            exit 1
        fi

        # Spawn socket forwarder
        socat openssl-listen:"${INTERNAL_PORT}",fork,reuseaddr,cert=/tmp/cert-key.pem,cafile=/vapr/certstore/ca.crt TCP4:"${TARGET_IP}:${TARGET_PORT}" &
        CHILD_PIDS="${CHILD_PIDS} $!"

        echo Forwarding "${EXTERNAL_IP}:${EXTERNAL_PORT}" to "${CONTAINER}:${TARGET_PORT}".

        # Register forwarder
        etcdctl_mkdir vapr/ambassador/"${CONTAINER}"/bindings/"${TARGET_PORT}"
        etcdctl_set vapr/ambassador/"${CONTAINER}"/bindings/"${TARGET_PORT}"/bind "${EXTERNAL_IP}:${EXTERNAL_PORT}"

        IDX=$((IDX + 1))
    done << EOF
$(echo /tmp/target_container_info | JSON.awk | awk '{ if ($1 ~ /\["NetworkSettings","Ports",.*]/) { print $1 " " $2; } }' | sed 's/.*"Ports","\([0-9]\+\)\/.*/\1/')
EOF
}

usage() {
    echo "Usage: $0 server target_container advertised_ip"
    echo "Usage: $0 client target_container"
    exit 1
}

# Read the arguments specified.
for var in ROLE CONTAINER EXTERNAL_IP; do
    eval "$var=\${1}"
    shift
done

KEYFILE_NAME=$(ls /vapr/keys)
KEYFILE_BASENAME="${KEYFILE_NAME%.*}"

# Merge the certificate and private key into a pem file at /tmp/cert-key.pem to be used by socat..
if cat /vapr/certstore/"${KEYFILE_BASENAME}".crt /vapr/keys/"${KEYFILE_BASENAME}".key > /tmp/cert-key.pem 2> /dev/null; then
    # Switch to the appropriate role.
    case "${ROLE}" in
        client|server)
            while [ 1 ]; do
                ${ROLE}
                etcdctl_watch vapr/ambassador/"${CONTAINER}"/bindings recursive > /dev/null
                echo $CHILD_PIDS
                for pid in $CHILD_PIDS; do
                    kill -9 $pid
                done
                CHILD_PIDS=
            done
            ;;
        *)
            usage
    esac
fi

echo "No certificate-key pair found at /vapr/certstore/${KEYFILE_BASENAME}.crt and /vapr/keys/${KEYFILE_BASENAME}.key."; exit 1
exit 1
